$date
   Fri Jun 28 23:47:20 2024
$end
$version
  2018.3
$end
$timescale
  1ps
$end
$scope module rotate_tb $end
$var reg 1 ! clock $end
$var reg 1 " enable $end
$var reg 1 # reset $end
$var reg 16 $ in_i [15:0] $end
$var reg 16 % in_q [15:0] $end
$var reg 16 & phase [15:0] $end
$var reg 1 ' input_valid $end
$var wire 32 ( xrot_data [31:0] $end
$var wire 9 ) xrot_addr [8:0] $end
$var wire 16 * xout_i [15:0] $end
$var wire 16 + xout_q [15:0] $end
$var wire 1 , xoutput_valid $end
$var wire 1 - ovalid $end
$var wire 16 . out_i [15:0] $end
$var wire 16 / out_q [15:0] $end
$var parameter 32 0 ROTATE_LEN_SHIFT [31:0] $end
$var parameter 32 1 ROTATE_SCALE_SHIFT [31:0] $end
$scope module u_xrotate $end
$var wire 1 2 clock $end
$var wire 1 3 enable $end
$var wire 1 4 reset $end
$var wire 16 5 in_i [15:0] $end
$var wire 16 6 in_q [15:0] $end
$var wire 16 7 phase [15:0] $end
$var wire 1 8 input_valid $end
$var wire 9 ) rot_addr [8:0] $end
$var wire 32 ( rot_data [31:0] $end
$var wire 16 * out_i [15:0] $end
$var wire 16 + out_q [15:0] $end
$var wire 1 , output_valid $end
$var reg 16 9 phase_delayed [15:0] $end
$var reg 16 : phase_abs [15:0] $end
$var reg 3 ; quadrant [2:0] $end
$var reg 3 < quadrant_delayed [2:0] $end
$var wire 16 = in_i_delayed [15:0] $end
$var wire 16 > in_q_delayed [15:0] $end
$var reg 16 ? actual_phase [15:0] $end
$var wire 16 @ raw_rot_i [15:0] $end
$var wire 16 A raw_rot_q [15:0] $end
$var reg 16 B rot_i [15:0] $end
$var reg 16 C rot_q [15:0] $end
$var wire 1 D mult_in_stb $end
$var wire 32 E p_i [31:0] $end
$var wire 32 F p_q [31:0] $end
$var integer 32 G i $end
$var parameter 32 H ROTATE_LEN_SHIFT [31:0] $end
$var parameter 32 I ROTATE_SCALE_SHIFT [31:0] $end
$var parameter 32 J PI [31:0] $end
$var parameter 32 K DOUBLE_PI [31:0] $end
$var parameter 32 L PI_2 [31:0] $end
$var parameter 32 M PI_4 [31:0] $end
$var parameter 32 N PI_3_4 [31:0] $end
$scope module in_delay_inst $end
$var wire 1 2 clock $end
$var wire 1 4 reset $end
$var wire 32 O idata [31:0] $end
$var wire 32 P odata [31:0] $end
$var integer 32 Q i $end
$var parameter 32 R WIDTH [31:0] $end
$var parameter 32 S DELAY [31:0] $end
$upscope $end
$scope module mult_delay_inst $end
$var wire 1 2 clock $end
$var wire 1 4 reset $end
$var wire 1 8 idata [0:0] $end
$var wire 1 D odata [0:0] $end
$var integer 32 T i $end
$var parameter 32 U WIDTH [31:0] $end
$var parameter 32 V DELAY [31:0] $end
$upscope $end
$scope module mult_inst $end
$var wire 1 2 clock $end
$var wire 1 3 enable $end
$var wire 1 4 reset $end
$var wire 16 = a_i [15:0] $end
$var wire 16 > a_q [15:0] $end
$var wire 16 W b_i [15:0] $end
$var wire 16 X b_q [15:0] $end
$var wire 1 D input_valid $end
$var reg 32 Y p_i [31:0] $end
$var reg 32 Z p_q [31:0] $end
$var wire 1 , output_valid $end
$var reg 4 [ delay [3:0] $end
$var reg 16 \ ar [15:0] $end
$var reg 16 ] ai [15:0] $end
$var reg 16 ^ br [15:0] $end
$var reg 16 _ bi [15:0] $end
$var wire 32 ` prod_i [31:0] $end
$var wire 32 a prod_q [31:0] $end
$var wire 32 b s_axis_a_tdata [31:0] $end
$var wire 32 c s_axis_b_tdata [31:0] $end
$var wire 64 d m_axis_dout_tdata [63:0] $end
$var wire 1 e m_axis_dout_tvalid $end
$var parameter 32 f DELAY [31:0] $end
$scope module mult_inst $end
$var wire 1 g aclk $end
$var wire 1 h s_axis_a_tvalid $end
$var wire 32 i s_axis_a_tdata [31:0] $end
$var wire 1 j s_axis_b_tvalid $end
$var wire 32 k s_axis_b_tdata [31:0] $end
$var wire 1 l m_axis_dout_tvalid $end
$var wire 64 m m_axis_dout_tdata [63:0] $end
$upscope $end
$scope module stb_delay_inst $end
$var wire 1 2 clock $end
$var wire 1 4 reset $end
$var wire 1 D idata [0:0] $end
$var wire 1 , odata [0:0] $end
$var integer 32 n i $end
$var parameter 32 o WIDTH [31:0] $end
$var parameter 32 p DELAY [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module rot_lut_inst $end
$var wire 1 q clka $end
$var wire 9 ) addra [8:0] $end
$var wire 32 ( douta [31:0] $end
$var wire 1 r clkb $end
$var wire 9 ) addrb [8:0] $end
$var wire 32 s doutb [31:0] $end
$scope module inst $end
$var wire 1 q clka $end
$var wire 1 t rsta $end
$var wire 1 u ena $end
$var wire 1 v regcea $end
$var wire 1 w wea [0:0] $end
$var wire 9 ) addra [8:0] $end
$var wire 32 x dina [31:0] $end
$var wire 32 ( douta [31:0] $end
$var wire 1 r clkb $end
$var wire 1 y rstb $end
$var wire 1 z enb $end
$var wire 1 { regceb $end
$var wire 1 | web [0:0] $end
$var wire 9 ) addrb [8:0] $end
$var wire 32 } dinb [31:0] $end
$var wire 32 s doutb [31:0] $end
$var wire 1 ~ injectsbiterr $end
$var wire 1 !! injectdbiterr $end
$var wire 1 "! sbiterr $end
$var wire 1 #! dbiterr $end
$var wire 9 $! rdaddrecc [8:0] $end
$var wire 1 %! eccpipece $end
$var wire 1 &! sleep $end
$var wire 1 '! deepsleep $end
$var wire 1 (! shutdown $end
$var wire 1 )! rsta_busy $end
$var wire 1 *! rstb_busy $end
$var wire 1 +! s_aclk $end
$var wire 1 ,! s_aresetn $end
$var wire 4 -! s_axi_awid [3:0] $end
$var wire 32 .! s_axi_awaddr [31:0] $end
$var wire 8 /! s_axi_awlen [7:0] $end
$var wire 3 0! s_axi_awsize [2:0] $end
$var wire 2 1! s_axi_awburst [1:0] $end
$var wire 1 2! s_axi_awvalid $end
$var wire 1 3! s_axi_awready $end
$var wire 32 4! s_axi_wdata [31:0] $end
$var wire 1 5! s_axi_wstrb [0:0] $end
$var wire 1 6! s_axi_wlast $end
$var wire 1 7! s_axi_wvalid $end
$var wire 1 8! s_axi_wready $end
$var wire 4 9! s_axi_bid [3:0] $end
$var wire 2 :! s_axi_bresp [1:0] $end
$var wire 1 ;! s_axi_bvalid $end
$var wire 1 <! s_axi_bready $end
$var wire 4 =! s_axi_arid [3:0] $end
$var wire 32 >! s_axi_araddr [31:0] $end
$var wire 8 ?! s_axi_arlen [7:0] $end
$var wire 3 @! s_axi_arsize [2:0] $end
$var wire 2 A! s_axi_arburst [1:0] $end
$var wire 1 B! s_axi_arvalid $end
$var wire 1 C! s_axi_arready $end
$var wire 4 D! s_axi_rid [3:0] $end
$var wire 32 E! s_axi_rdata [31:0] $end
$var wire 2 F! s_axi_rresp [1:0] $end
$var wire 1 G! s_axi_rlast $end
$var wire 1 H! s_axi_rvalid $end
$var wire 1 I! s_axi_rready $end
$var wire 1 J! s_axi_injectsbiterr $end
$var wire 1 K! s_axi_injectdbiterr $end
$var wire 1 L! s_axi_sbiterr $end
$var wire 1 M! s_axi_dbiterr $end
$var wire 9 N! s_axi_rdaddrecc [8:0] $end
$var wire 1 O! SBITERR $end
$var wire 1 P! DBITERR $end
$var wire 1 Q! S_AXI_AWREADY $end
$var wire 1 R! S_AXI_WREADY $end
$var wire 1 S! S_AXI_BVALID $end
$var wire 1 T! S_AXI_ARREADY $end
$var wire 1 U! S_AXI_RLAST $end
$var wire 1 V! S_AXI_RVALID $end
$var wire 1 W! S_AXI_SBITERR $end
$var wire 1 X! S_AXI_DBITERR $end
$var wire 1 Y! WEA [0:0] $end
$var wire 9 Z! ADDRA [8:0] $end
$var wire 32 [! DINA [31:0] $end
$var wire 32 \! DOUTA [31:0] $end
$var wire 1 ]! WEB [0:0] $end
$var wire 9 ^! ADDRB [8:0] $end
$var wire 32 _! DINB [31:0] $end
$var wire 32 `! DOUTB [31:0] $end
$var wire 9 a! RDADDRECC [8:0] $end
$var wire 4 b! S_AXI_AWID [3:0] $end
$var wire 32 c! S_AXI_AWADDR [31:0] $end
$var wire 8 d! S_AXI_AWLEN [7:0] $end
$var wire 3 e! S_AXI_AWSIZE [2:0] $end
$var wire 2 f! S_AXI_AWBURST [1:0] $end
$var wire 32 g! S_AXI_WDATA [31:0] $end
$var wire 1 h! S_AXI_WSTRB [0:0] $end
$var wire 4 i! S_AXI_BID [3:0] $end
$var wire 2 j! S_AXI_BRESP [1:0] $end
$var wire 4 k! S_AXI_ARID [3:0] $end
$var wire 32 l! S_AXI_ARADDR [31:0] $end
$var wire 8 m! S_AXI_ARLEN [7:0] $end
$var wire 3 n! S_AXI_ARSIZE [2:0] $end
$var wire 2 o! S_AXI_ARBURST [1:0] $end
$var wire 4 p! S_AXI_RID [3:0] $end
$var wire 32 q! S_AXI_RDATA [31:0] $end
$var wire 2 r! S_AXI_RRESP [1:0] $end
$var wire 9 s! S_AXI_RDADDRECC [8:0] $end
$var wire 1 t! WEB_parameterized [0:0] $end
$var wire 1 u! ECCPIPECE $end
$var wire 1 v! SLEEP $end
$var reg 1 w! RSTA_BUSY $end
$var reg 1 x! RSTB_BUSY $end
$var wire 1 y! CLKA $end
$var wire 1 z! RSTA $end
$var wire 1 {! ENA $end
$var wire 1 |! REGCEA $end
$var wire 1 }! CLKB $end
$var wire 1 ~! RSTB $end
$var wire 1 !" ENB $end
$var wire 1 "" REGCEB $end
$var wire 1 #" INJECTSBITERR $end
$var wire 1 $" INJECTDBITERR $end
$var wire 1 %" S_ACLK $end
$var wire 1 &" S_ARESETN $end
$var wire 1 '" S_AXI_AWVALID $end
$var wire 1 (" S_AXI_WLAST $end
$var wire 1 )" S_AXI_WVALID $end
$var wire 1 *" S_AXI_BREADY $end
$var wire 1 +" S_AXI_ARVALID $end
$var wire 1 ," S_AXI_RREADY $end
$var wire 1 -" S_AXI_INJECTSBITERR $end
$var wire 1 ." S_AXI_INJECTDBITERR $end
$var reg 1 /" injectsbiterr_in $end
$var reg 1 0" injectdbiterr_in $end
$var reg 1 1" rsta_in $end
$var reg 1 2" ena_in $end
$var reg 1 3" regcea_in $end
$var reg 1 4" wea_in [0:0] $end
$var reg 9 5" addra_in [8:0] $end
$var reg 32 6" dina_in [31:0] $end
$var wire 9 7" s_axi_awaddr_out_c [8:0] $end
$var wire 9 8" s_axi_araddr_out_c [8:0] $end
$var wire 1 9" s_axi_wr_en_c $end
$var wire 1 :" s_axi_rd_en_c $end
$var wire 1 ;" s_aresetn_a_c $end
$var wire 8 <" s_axi_arlen_c [7:0] $end
$var wire 4 =" s_axi_rid_c [3:0] $end
$var wire 32 >" s_axi_rdata_c [31:0] $end
$var wire 2 ?" s_axi_rresp_c [1:0] $end
$var wire 1 @" s_axi_rlast_c $end
$var wire 1 A" s_axi_rvalid_c $end
$var wire 1 B" s_axi_rready_c $end
$var wire 1 C" regceb_c $end
$var wire 7 D" s_axi_payload_c [6:0] $end
$var wire 7 E" m_axi_payload_c [6:0] $end
$var reg 5 F" RSTA_SHFT_REG [4:0] $end
$var reg 1 G" POR_A $end
$var reg 5 H" RSTB_SHFT_REG [4:0] $end
$var reg 1 I" POR_B $end
$var reg 1 J" ENA_dly $end
$var reg 1 K" ENA_dly_D $end
$var reg 1 L" ENB_dly $end
$var reg 1 M" ENB_dly_D $end
$var wire 1 N" RSTA_I_SAFE $end
$var wire 1 O" RSTB_I_SAFE $end
$var wire 1 P" ENA_I_SAFE $end
$var wire 1 Q" ENB_I_SAFE $end
$var reg 1 R" ram_rstram_a_busy $end
$var reg 1 S" ram_rstreg_a_busy $end
$var reg 1 T" ram_rstram_b_busy $end
$var reg 1 U" ram_rstreg_b_busy $end
$var reg 1 V" ENA_dly_reg $end
$var reg 1 W" ENB_dly_reg $end
$var reg 1 X" ENA_dly_reg_D $end
$var reg 1 Y" ENB_dly_reg_D $end
$var parameter 144 Z" C_CORENAME [143:0] $end
$var parameter 32 [" C_FAMILY [31:0] $end
$var parameter 32 \" C_XDEVICEFAMILY [31:0] $end
$var parameter 16 ]" C_ELABORATION_DIR [15:0] $end
$var parameter 32 ^" C_INTERFACE_TYPE [31:0] $end
$var parameter 32 _" C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 `" C_CTRL_ECC_ALGO [31:0] $end
$var parameter 32 a" C_ENABLE_32BIT_ADDRESS [31:0] $end
$var parameter 32 b" C_AXI_TYPE [31:0] $end
$var parameter 32 c" C_AXI_SLAVE_TYPE [31:0] $end
$var parameter 32 d" C_HAS_AXI_ID [31:0] $end
$var parameter 32 e" C_AXI_ID_WIDTH [31:0] $end
$var parameter 32 f" C_MEM_TYPE [31:0] $end
$var parameter 32 g" C_BYTE_SIZE [31:0] $end
$var parameter 32 h" C_ALGORITHM [31:0] $end
$var parameter 32 i" C_PRIM_TYPE [31:0] $end
$var parameter 32 j" C_LOAD_INIT_FILE [31:0] $end
$var parameter 88 k" C_INIT_FILE_NAME [87:0] $end
$var parameter 88 l" C_INIT_FILE [87:0] $end
$var parameter 32 m" C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 n" C_DEFAULT_DATA [7:0] $end
$var parameter 32 o" C_HAS_RSTA [31:0] $end
$var parameter 16 p" C_RST_PRIORITY_A [15:0] $end
$var parameter 32 q" C_RSTRAM_A [31:0] $end
$var parameter 8 r" C_INITA_VAL [7:0] $end
$var parameter 32 s" C_HAS_ENA [31:0] $end
$var parameter 32 t" C_HAS_REGCEA [31:0] $end
$var parameter 32 u" C_USE_BYTE_WEA [31:0] $end
$var parameter 32 v" C_WEA_WIDTH [31:0] $end
$var parameter 88 w" C_WRITE_MODE_A [87:0] $end
$var parameter 32 x" C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 y" C_READ_WIDTH_A [31:0] $end
$var parameter 32 z" C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 {" C_READ_DEPTH_A [31:0] $end
$var parameter 32 |" C_ADDRA_WIDTH [31:0] $end
$var parameter 32 }" C_HAS_RSTB [31:0] $end
$var parameter 16 ~" C_RST_PRIORITY_B [15:0] $end
$var parameter 32 !# C_RSTRAM_B [31:0] $end
$var parameter 8 "# C_INITB_VAL [7:0] $end
$var parameter 32 ## C_HAS_ENB [31:0] $end
$var parameter 32 $# C_HAS_REGCEB [31:0] $end
$var parameter 32 %# C_USE_BYTE_WEB [31:0] $end
$var parameter 32 &# C_WEB_WIDTH [31:0] $end
$var parameter 88 '# C_WRITE_MODE_B [87:0] $end
$var parameter 32 (# C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 )# C_READ_WIDTH_B [31:0] $end
$var parameter 32 *# C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 +# C_READ_DEPTH_B [31:0] $end
$var parameter 32 ,# C_ADDRB_WIDTH [31:0] $end
$var parameter 32 -# C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 .# C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 /# C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 0# C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 1# C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 2# C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 3# C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 4# C_USE_SOFTECC [31:0] $end
$var parameter 32 5# C_READ_LATENCY_A [31:0] $end
$var parameter 32 6# C_READ_LATENCY_B [31:0] $end
$var parameter 32 7# C_USE_ECC [31:0] $end
$var parameter 32 8# C_EN_ECC_PIPE [31:0] $end
$var parameter 32 9# C_HAS_INJECTERR [31:0] $end
$var parameter 24 :# C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 ;# C_COMMON_CLK [31:0] $end
$var parameter 32 <# C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 =# C_EN_SLEEP_PIN [31:0] $end
$var parameter 32 ># C_USE_URAM [31:0] $end
$var parameter 32 ?# C_EN_RDADDRA_CHG [31:0] $end
$var parameter 32 @# C_EN_RDADDRB_CHG [31:0] $end
$var parameter 32 A# C_EN_DEEPSLEEP_PIN [31:0] $end
$var parameter 32 B# C_EN_SHUTDOWN_PIN [31:0] $end
$var parameter 32 C# C_EN_SAFETY_CKT [31:0] $end
$var parameter 8 D# C_COUNT_36K_BRAM [7:0] $end
$var parameter 8 E# C_COUNT_18K_BRAM [7:0] $end
$var parameter 328 F# C_EST_POWER_SUMMARY [327:0] $end
$var parameter 32 G# C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 H# FLOP_DELAY [31:0] $end
$var parameter 32 I# C_AXI_PAYLOAD [31:0] $end
$var parameter 32 J# AXI_FULL_MEMORY_SLAVE [31:0] $end
$var parameter 32 K# C_AXI_ADDR_WIDTH_MSB [31:0] $end
$var parameter 32 L# C_AXI_ADDR_WIDTH [31:0] $end
$var parameter 32 M# LOWER_BOUND_VAL [31:0] $end
$var parameter 32 N# C_AXI_ADDR_WIDTH_LSB [31:0] $end
$var parameter 32 O# C_AXI_OS_WR [31:0] $end
$scope module native_mem_module.blk_mem_gen_v8_4_2_inst $end
$var wire 1 y! CLKA $end
$var wire 1 N" RSTA $end
$var wire 1 P" ENA $end
$var wire 1 P# REGCEA $end
$var wire 1 Q# WEA [0:0] $end
$var wire 9 R# ADDRA [8:0] $end
$var wire 32 S# DINA [31:0] $end
$var wire 32 \! DOUTA [31:0] $end
$var wire 1 }! CLKB $end
$var wire 1 O" RSTB $end
$var wire 1 Q" ENB $end
$var wire 1 "" REGCEB $end
$var wire 1 ]! WEB [0:0] $end
$var wire 9 ^! ADDRB [8:0] $end
$var wire 32 _! DINB [31:0] $end
$var wire 32 `! DOUTB [31:0] $end
$var wire 1 T# INJECTSBITERR $end
$var wire 1 U# INJECTDBITERR $end
$var wire 1 u! ECCPIPECE $end
$var wire 1 v! SLEEP $end
$var wire 1 O! SBITERR $end
$var wire 1 P! DBITERR $end
$var wire 9 a! RDADDRECC [8:0] $end
$var reg 39 V# doublebit_error [38:0] $end
$var reg 32 W# memory_out_a [31:0] $end
$var reg 32 X# memory_out_b [31:0] $end
$var reg 1 Y# sbiterr_in $end
$var wire 1 Z# sbiterr_sdp $end
$var reg 1 [# dbiterr_in $end
$var wire 1 \# dbiterr_sdp $end
$var wire 32 ]# dout_i [31:0] $end
$var wire 1 ^# dbiterr_i $end
$var wire 1 _# sbiterr_i $end
$var wire 9 `# rdaddrecc_i [8:0] $end
$var reg 9 a# rdaddrecc_in [8:0] $end
$var wire 9 b# rdaddrecc_sdp [8:0] $end
$var reg 32 c# inita_val [31:0] $end
$var reg 32 d# initb_val [31:0] $end
$var reg 1 e# is_collision $end
$var reg 1 f# is_collision_a $end
$var reg 1 g# is_collision_delay_a $end
$var reg 1 h# is_collision_b $end
$var reg 1 i# is_collision_delay_b $end
$var integer 32 j# status $end
$var integer 32 k# initfile $end
$var integer 32 l# meminitfile $end
$var reg 32 m# mif_data [31:0] $end
$var reg 32 n# mem_data [31:0] $end
$var reg 256 o# inita_str [255:0] $end
$var reg 256 p# initb_str [255:0] $end
$var reg 256 q# default_data_str [255:0] $end
$var reg 8184 r# init_file_str [8183:0] $end
$var reg 8184 s# mem_init_file_str [8183:0] $end
$var integer 32 t# cnt $end
$var integer 32 u# write_addr_a_width $end
$var integer 32 v# read_addr_a_width $end
$var integer 32 w# write_addr_b_width $end
$var integer 32 x# read_addr_b_width $end
$var wire 1 y# ena_i $end
$var wire 1 z# enb_i $end
$var wire 1 {# reseta_i $end
$var wire 1 |# resetb_i $end
$var wire 1 }# wea_i [0:0] $end
$var wire 1 ~# web_i [0:0] $end
$var wire 1 !$ rea_i $end
$var wire 1 "$ reb_i $end
$var wire 1 #$ rsta_outp_stage $end
$var wire 1 $$ rstb_outp_stage $end
$var parameter 144 %$ C_CORENAME [143:0] $end
$var parameter 32 &$ C_FAMILY [31:0] $end
$var parameter 32 '$ C_XDEVICEFAMILY [31:0] $end
$var parameter 32 ($ C_MEM_TYPE [31:0] $end
$var parameter 32 )$ C_BYTE_SIZE [31:0] $end
$var parameter 32 *$ C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 +$ C_ALGORITHM [31:0] $end
$var parameter 32 ,$ C_PRIM_TYPE [31:0] $end
$var parameter 32 -$ C_LOAD_INIT_FILE [31:0] $end
$var parameter 88 .$ C_INIT_FILE_NAME [87:0] $end
$var parameter 88 /$ C_INIT_FILE [87:0] $end
$var parameter 32 0$ C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 1$ C_DEFAULT_DATA [7:0] $end
$var parameter 32 2$ C_RST_TYPE [31:0] $end
$var parameter 32 3$ C_HAS_RSTA [31:0] $end
$var parameter 16 4$ C_RST_PRIORITY_A [15:0] $end
$var parameter 32 5$ C_RSTRAM_A [31:0] $end
$var parameter 8 6$ C_INITA_VAL [7:0] $end
$var parameter 32 7$ C_HAS_ENA [31:0] $end
$var parameter 32 8$ C_HAS_REGCEA [31:0] $end
$var parameter 32 9$ C_USE_BYTE_WEA [31:0] $end
$var parameter 32 :$ C_WEA_WIDTH [31:0] $end
$var parameter 88 ;$ C_WRITE_MODE_A [87:0] $end
$var parameter 32 <$ C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 =$ C_READ_WIDTH_A [31:0] $end
$var parameter 32 >$ C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 ?$ C_READ_DEPTH_A [31:0] $end
$var parameter 32 @$ C_ADDRA_WIDTH [31:0] $end
$var parameter 32 A$ C_HAS_RSTB [31:0] $end
$var parameter 16 B$ C_RST_PRIORITY_B [15:0] $end
$var parameter 32 C$ C_RSTRAM_B [31:0] $end
$var parameter 8 D$ C_INITB_VAL [7:0] $end
$var parameter 32 E$ C_HAS_ENB [31:0] $end
$var parameter 32 F$ C_HAS_REGCEB [31:0] $end
$var parameter 32 G$ C_USE_BYTE_WEB [31:0] $end
$var parameter 32 H$ C_WEB_WIDTH [31:0] $end
$var parameter 88 I$ C_WRITE_MODE_B [87:0] $end
$var parameter 32 J$ C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 K$ C_READ_WIDTH_B [31:0] $end
$var parameter 32 L$ C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 M$ C_READ_DEPTH_B [31:0] $end
$var parameter 32 N$ C_ADDRB_WIDTH [31:0] $end
$var parameter 32 O$ C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 P$ C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 Q$ C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 R$ C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 S$ C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 T$ C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 U$ C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 V$ C_USE_SOFTECC [31:0] $end
$var parameter 32 W$ C_USE_ECC [31:0] $end
$var parameter 32 X$ C_HAS_INJECTERR [31:0] $end
$var parameter 24 Y$ C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 Z$ C_COMMON_CLK [31:0] $end
$var parameter 32 [$ FLOP_DELAY [31:0] $end
$var parameter 32 \$ C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 ]$ C_EN_ECC_PIPE [31:0] $end
$var parameter 32 ^$ C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 _$ ADDRFILE [31:0] $end
$var parameter 32 `$ COLLFILE [31:0] $end
$var parameter 32 a$ ERRFILE [31:0] $end
$var parameter 32 b$ COLL_DELAY [31:0] $end
$var parameter 32 c$ CHKBIT_WIDTH [31:0] $end
$var parameter 32 d$ MIN_WIDTH_A [31:0] $end
$var parameter 32 e$ MIN_WIDTH_B [31:0] $end
$var parameter 32 f$ MIN_WIDTH [31:0] $end
$var parameter 32 g$ MAX_DEPTH_A [31:0] $end
$var parameter 32 h$ MAX_DEPTH_B [31:0] $end
$var parameter 32 i$ MAX_DEPTH [31:0] $end
$var parameter 32 j$ WRITE_WIDTH_RATIO_A [31:0] $end
$var parameter 32 k$ READ_WIDTH_RATIO_A [31:0] $end
$var parameter 32 l$ WRITE_WIDTH_RATIO_B [31:0] $end
$var parameter 32 m$ READ_WIDTH_RATIO_B [31:0] $end
$var parameter 32 n$ WRITE_ADDR_A_DIV [31:0] $end
$var parameter 32 o$ READ_ADDR_A_DIV [31:0] $end
$var parameter 32 p$ WRITE_ADDR_B_DIV [31:0] $end
$var parameter 32 q$ READ_ADDR_B_DIV [31:0] $end
$var parameter 32 r$ BYTE_SIZE [31:0] $end
$var parameter 56 s$ C_FAMILY_LOCALPARAM [55:0] $end
$var parameter 0 t$ SINGLE_PORT $end
$var parameter 0 u$ IS_ROM $end
$var parameter 0 v$ HAS_A_WRITE $end
$var parameter 0 w$ HAS_B_WRITE $end
$var parameter 0 x$ HAS_A_READ $end
$var parameter 0 y$ HAS_B_READ $end
$var parameter 0 z$ HAS_B_PORT $end
$var parameter 32 {$ MUX_PIPELINE_STAGES_A [31:0] $end
$var parameter 32 |$ MUX_PIPELINE_STAGES_B [31:0] $end
$var parameter 32 }$ NUM_OUTPUT_STAGES_A [31:0] $end
$var parameter 32 ~$ NUM_OUTPUT_STAGES_B [31:0] $end
$scope module reg_a $end
$var wire 1 y! CLK $end
$var wire 1 #$ RST $end
$var wire 1 P" EN $end
$var wire 1 P# REGCE $end
$var wire 32 !% DIN_I [31:0] $end
$var reg 32 "% DOUT [31:0] $end
$var wire 1 #% SBITERR_IN_I $end
$var wire 1 $% DBITERR_IN_I $end
$var reg 1 %% SBITERR $end
$var reg 1 &% DBITERR $end
$var wire 9 '% RDADDRECC_IN_I [8:0] $end
$var wire 1 (% ECCPIPECE $end
$var reg 9 )% RDADDRECC [8:0] $end
$var reg 32 *% out_regs [31:0] $end
$var reg 9 +% rdaddrecc_regs [8:0] $end
$var reg 1 ,% sbiterr_regs [0:0] $end
$var reg 1 -% dbiterr_regs [0:0] $end
$var reg 256 .% init_str [255:0] $end
$var reg 32 /% init_val [31:0] $end
$var wire 1 0% en_i $end
$var wire 1 1% regce_i $end
$var wire 1 2% rst_i $end
$var reg 32 3% DIN [31:0] $end
$var reg 9 4% RDADDRECC_IN [8:0] $end
$var reg 1 5% SBITERR_IN $end
$var reg 1 6% DBITERR_IN $end
$var parameter 32 7% C_FAMILY [31:0] $end
$var parameter 32 8% C_XDEVICEFAMILY [31:0] $end
$var parameter 32 9% C_RST_TYPE [31:0] $end
$var parameter 32 :% C_HAS_RST [31:0] $end
$var parameter 32 ;% C_RSTRAM [31:0] $end
$var parameter 16 <% C_RST_PRIORITY [15:0] $end
$var parameter 8 =% C_INIT_VAL [7:0] $end
$var parameter 32 >% C_HAS_EN [31:0] $end
$var parameter 32 ?% C_HAS_REGCE [31:0] $end
$var parameter 32 @% C_DATA_WIDTH [31:0] $end
$var parameter 32 A% C_ADDRB_WIDTH [31:0] $end
$var parameter 32 B% C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 C% C_USE_SOFTECC [31:0] $end
$var parameter 32 D% C_USE_ECC [31:0] $end
$var parameter 32 E% NUM_STAGES [31:0] $end
$var parameter 32 F% C_EN_ECC_PIPE [31:0] $end
$var parameter 32 G% FLOP_DELAY [31:0] $end
$var parameter 32 H% REG_STAGES [31:0] $end
$upscope $end
$scope module reg_b $end
$var wire 1 }! CLK $end
$var wire 1 $$ RST $end
$var wire 1 Q" EN $end
$var wire 1 "" REGCE $end
$var wire 32 I% DIN_I [31:0] $end
$var reg 32 J% DOUT [31:0] $end
$var wire 1 K% SBITERR_IN_I $end
$var wire 1 L% DBITERR_IN_I $end
$var reg 1 M% SBITERR $end
$var reg 1 N% DBITERR $end
$var wire 9 O% RDADDRECC_IN_I [8:0] $end
$var wire 1 u! ECCPIPECE $end
$var reg 9 P% RDADDRECC [8:0] $end
$var reg 32 Q% out_regs [31:0] $end
$var reg 9 R% rdaddrecc_regs [8:0] $end
$var reg 1 S% sbiterr_regs [0:0] $end
$var reg 1 T% dbiterr_regs [0:0] $end
$var reg 256 U% init_str [255:0] $end
$var reg 32 V% init_val [31:0] $end
$var wire 1 W% en_i $end
$var wire 1 X% regce_i $end
$var wire 1 Y% rst_i $end
$var reg 32 Z% DIN [31:0] $end
$var reg 9 [% RDADDRECC_IN [8:0] $end
$var reg 1 \% SBITERR_IN $end
$var reg 1 ]% DBITERR_IN $end
$var parameter 32 ^% C_FAMILY [31:0] $end
$var parameter 32 _% C_XDEVICEFAMILY [31:0] $end
$var parameter 32 `% C_RST_TYPE [31:0] $end
$var parameter 32 a% C_HAS_RST [31:0] $end
$var parameter 32 b% C_RSTRAM [31:0] $end
$var parameter 16 c% C_RST_PRIORITY [15:0] $end
$var parameter 8 d% C_INIT_VAL [7:0] $end
$var parameter 32 e% C_HAS_EN [31:0] $end
$var parameter 32 f% C_HAS_REGCE [31:0] $end
$var parameter 32 g% C_DATA_WIDTH [31:0] $end
$var parameter 32 h% C_ADDRB_WIDTH [31:0] $end
$var parameter 32 i% C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 j% C_USE_SOFTECC [31:0] $end
$var parameter 32 k% C_USE_ECC [31:0] $end
$var parameter 32 l% NUM_STAGES [31:0] $end
$var parameter 32 m% C_EN_ECC_PIPE [31:0] $end
$var parameter 32 n% FLOP_DELAY [31:0] $end
$var parameter 32 o% REG_STAGES [31:0] $end
$upscope $end
$scope module has_softecc_output_reg_stage $end
$var wire 1 }! CLK $end
$var wire 32 ]# DIN [31:0] $end
$var reg 32 p% DOUT [31:0] $end
$var wire 1 _# SBITERR_IN $end
$var wire 1 ^# DBITERR_IN $end
$var reg 1 q% SBITERR $end
$var reg 1 r% DBITERR $end
$var wire 9 `# RDADDRECC_IN [8:0] $end
$var reg 9 s% RDADDRECC [8:0] $end
$var reg 32 t% dout_i [31:0] $end
$var reg 1 u% sbiterr_i $end
$var reg 1 v% dbiterr_i $end
$var reg 9 w% rdaddrecc_i [8:0] $end
$var parameter 32 x% C_DATA_WIDTH [31:0] $end
$var parameter 32 y% C_ADDRB_WIDTH [31:0] $end
$var parameter 32 z% C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 {% C_USE_SOFTECC [31:0] $end
$var parameter 32 |% FLOP_DELAY [31:0] $end
$upscope $end
$scope task write_a $end
$var reg 9 }% addr [8:0] $end
$var reg 1 ~% byte_en [0:0] $end
$var reg 32 !& data [31:0] $end
$var reg 1 "& inj_sbiterr $end
$var reg 1 #& inj_dbiterr $end
$var reg 32 $& current_contents [31:0] $end
$var reg 9 %& address [8:0] $end
$var integer 32 && i $end
$upscope $end
$scope task write_b $end
$var reg 9 '& addr [8:0] $end
$var reg 1 (& byte_en [0:0] $end
$var reg 32 )& data [31:0] $end
$var reg 32 *& current_contents [31:0] $end
$var reg 9 +& address [8:0] $end
$var integer 32 ,& i $end
$upscope $end
$scope task read_a $end
$var reg 9 -& addr [8:0] $end
$var reg 1 .& reset $end
$var reg 9 /& address [8:0] $end
$var integer 32 0& i $end
$upscope $end
$scope task read_b $end
$var reg 9 1& addr [8:0] $end
$var reg 1 2& reset $end
$var reg 9 3& address [8:0] $end
$var integer 32 4& i $end
$upscope $end
$scope task init_memory $end
$var integer 32 5& i $end
$var integer 32 6& j $end
$var integer 32 7& addr_step $end
$var integer 32 8& status $end
$var reg 32 9& default_data [31:0] $end
$upscope $end
$scope function log2roundup $end
$var integer 32 :& log2roundup $end
$var integer 32 ;& data_value $end
$var integer 32 <& width $end
$var integer 32 =& cnt $end
$upscope $end
$scope function collision_check $end
$var integer 32 >& collision_check $end
$var reg 9 ?& addr_a [8:0] $end
$var integer 32 @& iswrite_a $end
$var reg 9 A& addr_b [8:0] $end
$var integer 32 B& iswrite_b $end
$var reg 1 C& c_aw_bw $end
$var reg 1 D& c_aw_br $end
$var reg 1 E& c_ar_bw $end
$var integer 32 F& scaled_addra_to_waddrb_width $end
$var integer 32 G& scaled_addrb_to_waddrb_width $end
$var integer 32 H& scaled_addra_to_waddra_width $end
$var integer 32 I& scaled_addrb_to_waddra_width $end
$var integer 32 J& scaled_addra_to_raddrb_width $end
$var integer 32 K& scaled_addrb_to_raddrb_width $end
$var integer 32 L& scaled_addra_to_raddra_width $end
$var integer 32 M& scaled_addrb_to_raddra_width $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module u_rotate $end
$var wire 1 N& clock $end
$var wire 1 O& reset $end
$var wire 16 P& phase [15:0] $end
$var wire 1 Q& ivalid $end
$var wire 16 R& idata_r [15:0] $end
$var wire 16 S& idata_i [15:0] $end
$var wire 1 - ovalid $end
$var wire 16 . result_r [15:0] $end
$var wire 16 / result_i [15:0] $end
$var reg 16 T& phase_buf [15:0] $end
$var reg 16 U& phase_abs [15:0] $end
$var reg 16 V& phase_act [15:0] $end
$var reg 3 W& quadrant [2:0] $end
$var reg 3 X& quadrant_buf [2:0] $end
$var wire 32 Y& p_i [31:0] $end
$var wire 32 Z& p_q [31:0] $end
$var reg 32 [& rot_data [31:0] $end
$var reg 16 \& rot_i [15:0] $end
$var reg 16 ]& rot_q [15:0] $end
$var wire 16 ^& raw_rot_i [15:0] $end
$var wire 16 _& raw_rot_q [15:0] $end
$var wire 11 `& rot_addr [10:0] $end
$var wire 1 a& mvalid $end
$var wire 16 b& idata_r_buf [15:0] $end
$var wire 16 c& idata_i_buf [15:0] $end
$var parameter 32 d& ROTATE_SCALE [31:0] $end
$var parameter 32 e& ROTATE_WIDTH [31:0] $end
$var parameter 32 f& INW [31:0] $end
$var parameter 32 g& PI [31:0] $end
$var parameter 32 h& OPI [31:0] $end
$var parameter 32 i& DPI [31:0] $end
$var parameter 32 j& HPI [31:0] $end
$var parameter 32 k& QPI [31:0] $end
$var parameter 32 l& TQPI [31:0] $end
$scope module u_shiftTaps $end
$var wire 1 N& clock $end
$var wire 1 O& reset $end
$var wire 1 Q& ivalid $end
$var wire 32 m& shiftin [31:0] $end
$var wire 1 a& ovalid $end
$var wire 32 n& shiftout [31:0] $end
$var reg 1 o& done $end
$var reg 1 p& valid $end
$var reg 2 q& count [1:0] $end
$var reg 32 r& \BRAM.odata  [31:0] $end
$var integer 32 s& \BRAM.i  $end
$var parameter 32 t& THRES [31:0] $end
$var parameter 32 u& WIDTH [31:0] $end
$var parameter 32 v& SHIFT [31:0] $end
$var parameter 32 w& CWIDTH [31:0] $end
$upscope $end
$scope module u_cmplMult $end
$var wire 1 N& clock $end
$var wire 1 O& reset $end
$var wire 1 a& ivalid $end
$var wire 16 b& dataa_r [15:0] $end
$var wire 16 c& dataa_i [15:0] $end
$var wire 16 x& datab_r [15:0] $end
$var wire 16 y& datab_i [15:0] $end
$var wire 1 - ovalid $end
$var wire 32 Y& result_r [31:0] $end
$var wire 32 Z& result_i [31:0] $end
$var reg 33 z& outr [32:0] $end
$var reg 33 {& outi [32:0] $end
$var reg 32 |& ab_rr [31:0] $end
$var reg 32 }& ab_ii [31:0] $end
$var reg 32 ~& ab_ri [31:0] $end
$var reg 32 !' ab_ir [31:0] $end
$var reg 2 "' ovalid_buf [1:0] $end
$var parameter 32 #' SCALE_FACTOR [31:0] $end
$var parameter 32 $' REAL_WIDTH_A [31:0] $end
$var parameter 32 %' IMAG_WIDTH_A [31:0] $end
$var parameter 32 &' REAL_WIDTH_B [31:0] $end
$var parameter 32 '' IMAG_WIDTH_B [31:0] $end
$var parameter 32 (' REAL_WIDTH_O [31:0] $end
$var parameter 32 )' IMAG_WIDTH_O [31:0] $end
$var parameter 32 *' AB_RR_WIDTH [31:0] $end
$var parameter 32 +' AB_II_WIDTH [31:0] $end
$var parameter 32 ,' AB_RI_WIDTH [31:0] $end
$var parameter 32 -' AB_IR_WIDTH [31:0] $end
$var parameter 32 .' REAL_WIDTH [31:0] $end
$var parameter 32 /' IMAG_WIDTH [31:0] $end
$var parameter 32 0' END_INDEX_R [31:0] $end
$var parameter 32 1' END_INDEX_I [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0!!
0!"
b0 !#
1!$
b0 !%
b100010101010000011010111010 !&
b0 !'
0"
0"!
0""
b110000 "#
1"$
b0 "%
0"&
b0 "'
1#
0#!
0#"
b0 ##
0#$
0#%
0#&
b0 #'
b0 $
b0 $!
0$"
b0 $#
0$$
0$%
b100010101010000011010111010 $&
b10000 $'
b0 %
0%!
0%"
b0 %#
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110010 %$
0%%
b111111111 %&
b10000 %'
b0 &
0&!
0&"
b1 &#
b1111010011110010110111001110001 &$
0&%
bx &&
b10000 &'
0'
0'!
0'"
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 '#
b1111010011110010110111001110001 '$
b0 '%
bx '&
b10000 ''
b0 (
0(!
0("
b100000 (#
b100 ($
0(%
x(&
b100000 ('
bx )
0)!
0)"
b100000 )#
b1001 )$
b0 )%
bx )&
b100000 )'
bx *
0*!
0*"
b1000000000 *#
b0 *$
b0 *%
bx *&
b100000 *'
bx +
0+!
0+"
b1000000000 +#
b1 +$
b0 +%
bx +&
b100000 +'
x,
0,!
0,"
b1001 ,#
b1 ,$
0,%
bx ,&
b100000 ,'
0-
b0 -!
0-"
b0 -#
b1 -$
0-%
bx -&
b100000 -'
b0 .
b0 .!
0."
b0 .#
b111001001101111011101000101111101101100011101010111010000101110011011010110100101100110 .$
b110000 .%
x.&
b100000 .'
b0 /
b0 /!
0/"
b0 /#
b111001001101111011101000101111101101100011101010111010000101110011011010110010101101101 /$
b0 /%
bx /&
b100000 /'
b1001 0
b0 0!
00"
b0 0#
b0 0$
10%
bx 0&
b1 0'
b1011 1
b0 1!
01"
b0 1#
b110000 1$
11%
bx 1&
b1 1'
02
02!
02"
b0 2#
b1010011010110010100111001000011 2$
02%
x2&
03
z3!
03"
b0 3#
b0 3$
b0 3%
bx 3&
14
b0 4!
04"
b0 4#
b100001101000101 4$
b0 4%
bx 4&
b0 5
05!
bx 5"
b1 5#
b0 5$
05%
b1000000000 5&
b0 6
06!
b0 6"
b1 6#
b110000 6$
06%
bx 6&
b0 7
07!
bz 7"
b0 7#
b0 7$
b1111010011110010110111001110001 7%
b1 7&
08
z8!
bz 8"
b0 8#
b0 8$
b1111010011110010110111001110001 8%
b1 8&
bx 9
bz 9!
z9"
b0 9#
b0 9$
b1010011010110010100111001000011 9%
b0 9&
bx :
bz :!
z:"
b10000010100110001001100 :#
b1 :$
b0 :%
b0 :&
bx ;
z;!
z;"
b1 ;#
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 ;$
b0 ;%
b1 ;&
bx <
0<!
bz <"
b0 <#
b100000 <$
b100001101000101 <%
b0 <&
bx =
b0 =!
bz ="
b0 =#
b100000 =$
b110000 =%
bx =&
bx >
b0 >!
bz >"
b0 >#
b1000000000 >$
b0 >%
bx >&
bx ?
b0 ?!
bz ?"
b0 ?#
b1000000000 ?$
b0 ?%
bx ?&
b0 @
b0 @!
z@"
b0 @#
b1001 @$
b100000 @%
bx @&
b0 A
b0 A!
zA"
b0 A#
b0 A$
b1001 A%
bx A&
bx B
0B!
0B"
b0 B#
b100001101000101 B$
b0 B%
bx B&
bx C
zC!
0C"
b0 C#
b0 C$
b0 C%
xC&
xD
bz D!
bz D"
b110001 D#
b110000 D$
b0 D%
xD&
bx E
bz E!
bz E"
b110000 E#
b0 E$
b0 E%
xE&
bx F
bz F!
b0 F"
b100010101110011011101000110100101101101011000010111010001100101011001000010000001010000011011110111011101100101011100100010000001100110011011110111001000100000010010010101000000100000001000000010000000100000001000000011101000100000001000000010000000100000001000000011010100101110001100100011010000110100001000000110110101010111 F#
b0 F$
b0 F%
bx F&
bx G
zG!
0G"
b0 G#
b0 G$
b1100100 G%
bx G&
b1001 H
zH!
b0 H"
b1100100 H#
b1 H$
b1 H%
bx H&
b1011 I
0I!
0I"
b111 I#
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 I$
b0 I%
bx I&
b11001001000 J
0J!
0J"
b1 J#
b100000 J$
b0 J%
bx J&
b110010010000 K
0K!
0K"
b1011 K#
b100000 K$
0K%
bx K&
b1100100100 L
zL!
0L"
b1011 L#
b1000000000 L$
0L%
bx L&
b110010010 M
zM!
0M"
b10 M#
b1000000000 M$
0M%
bx M&
b10010110110 N
bz N!
0N"
b0 N#
b1001 N$
0N%
0N&
b0 O
0O!
0O"
b10 O#
b0 O$
b0 O%
1O&
bx P
0P!
0P"
0P#
b0 P$
b0 P%
b0 P&
bx Q
zQ!
0Q"
0Q#
b0 Q$
b0 Q%
0Q&
b100000 R
zR!
0R"
bx R#
b0 R$
b0 R%
b0 R&
b100 S
zS!
0S"
b0 S#
b0 S$
0S%
b0 S&
bx T
zT!
0T"
0T#
b0 T$
0T%
b0 T&
b1 U
zU!
0U"
0U#
b0 U$
b110000 U%
b0 U&
b100 V
zV!
0V"
b11 V#
b0 V$
b0 V%
b0 V&
bx W
zW!
0W"
b0 W#
b0 W$
1W%
b0 W&
bx X
zX!
0X"
b0 X#
b0 X$
1X%
b0 X&
bx Y
0Y!
0Y"
0Y#
b10000010100110001001100 Y$
0Y%
b0 Y&
bx Z
bx Z!
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110010 Z"
0Z#
b1 Z$
b0 Z%
b0 Z&
bx [
b0 [!
b1111010011110010110111001110001 ["
0[#
b1100100 [$
b0 [%
bx [&
bx \
b0 \!
b1111010011110010110111001110001 \"
0\#
b0 \$
0\%
b0 \&
bx ]
0]!
b10111000101111 ]"
b0 ]#
b0 ]$
0]%
b0 ]&
bx ^
bx ^!
b0 ^"
0^#
b0 ^$
b1111010011110010110111001110001 ^%
bx ^&
bx _
b0 _!
b0 _"
0_#
b10000000000000000000000000000001 _$
b1111010011110010110111001110001 _%
bx _&
bx `
b0 `!
b1001110010011110100111001000101 `"
b0 `#
b10000000000000000000000000000001 `$
b1010011010110010100111001000011 `%
b0 `&
bx a
b0 a!
b0 a"
b0 a#
b10000000000000000000000000000001 a$
b0 a%
0a&
bx b
b0 b!
b1 b"
b0 b#
b1100100 b$
b0 b%
b0 b&
bx c
b0 c!
b0 c"
b0 c#
b111 c$
b100001101000101 c%
b0 c&
bx d
b0 d!
b0 d"
b0 d#
b100000 d$
b110000 d%
b1011 d&
0e
b0 e!
b100 e"
xe#
b100000 e$
b0 e%
b1001 e&
b100 f
b0 f!
b100 f"
xf#
b100000 f$
b0 f%
b1001 f&
0g
b0 g!
b1001 g"
xg#
b1000000000 g$
b100000 g%
b11001001000011111101 g&
xh
0h!
b1 h"
xh#
b1000000000 h$
b1001 h%
b11001001000 h&
bx i
bz i!
b1 i"
xi#
b1000000000 i$
b0 i%
b110010010000 i&
xj
bz j!
b1 j"
bx j#
b1 j$
b0 j%
b1100100100 j&
bx k
b0 k!
b111001001101111011101000101111101101100011101010111010000101110011011010110100101100110 k"
b11111111111111111011000111100000 k#
b1 k$
b0 k%
b110010010 k&
0l
b0 l!
b111001001101111011101000101111101101100011101010111010000101110011011010110010101101101 l"
bx l#
b1 l$
b0 l%
b10010110110 l&
bx m
b0 m!
b0 m"
b100010101010000011010111010 m#
b1 m$
b0 m%
b0 m&
bx n
b0 n!
b110000 n"
bx n#
b1 n$
b1100100 n%
b0 n&
b1 o
b0 o!
b0 o"
b110000 o#
b1 o$
b1 o%
0o&
b101 p
bz p!
b100001101000101 p"
b110000 p#
b1 p$
b0 p%
0p&
0q
bz q!
b0 q"
b110000 q#
b1 q$
0q%
b0 q&
0r
bz r!
b110000 r"
b111001001101111011101000101111101101100011101010111010000101110011011010110100101100110 r#
b1001 r$
0r%
b0 r&
b0 s
bz s!
b0 s"
b111001001101111011101000101111101101100011101010111010000101110011011010110010101101101 s#
b1110110011010010111001001110100011001010111100000110111 s$
b0 s%
b11 s&
0t
0t!
b0 t"
b1 t#
0t$
b0 t%
b1000000000 t&
0u
0u!
b0 u"
b1001 u#
1u$
0u%
b100000 u&
0v
0v!
b1 v"
b1001 v#
0v$
0v%
b11 v&
0w
0w!
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 w"
b1001 w#
0w$
b0 w%
b1 w&
b0 x
0x!
b100000 x"
b1001 x#
1x$
b100000 x%
b0 x&
0y
0y!
b100000 y"
1y#
1y$
b1001 y%
b0 y&
0z
0z!
b1000000000 z"
1z#
1z$
b0 z%
b0 z&
0{
0{!
b1000000000 {"
0{#
b0 {$
b0 {%
b0 {&
0|
0|!
b1001 |"
0|#
b0 |$
b1100100 |%
b0 |&
b0 }
0}!
b0 }"
0}#
b0 }$
b111111111 }%
b0 }&
0~
0~!
b100001101000101 ~"
0~#
b0 ~$
1~%
b0 ~&
$end
#100
b0 `
b0 a
b0 d
b0 m
#5000
1!
b0 )
b0 *
b0 +
0,
0.&
12
02&
b0 5"
b0 6"
b0 9
b0 :
b0 =
b0 >
b0 ?
b0 B
b0 C
0D
b0 E
b0 F
1N&
b0 P
b100 Q
b0 R#
b100 T
b0 W
b0 X
b0 Y
b0 Z
b0 Z!
b0 [
b0 [&
b0 \
b0 ]
b0 ^
b0 ^!
b0 ^&
b0 _
b0 _&
b0 b
b0 c
0e#
1g
0h
b0 i
0j
b0 k
b101 n
1q
1r
b11 s&
1y!
1}!
#5100
bx !%
bx "%
bx (
bx 3%
b0 4%
bx @
bx A
bx I%
bx J%
0M%
0N%
b0 P%
bx W#
bx X#
0Y#
bx Z%
0[#
b0 [%
bx \!
bx ]#
bx `!
b0 a#
bx p%
0q%
0r%
bx s
b0 s%
#10000
0!
02
0N&
0g
0q
0r
0y!
0}!
#15000
1!
b0 -&
b0 /&
b0 1&
12
b0 3&
1N&
b100 Q
b100 T
1g
b101 n
1q
1r
b11 s&
1y!
1}!
#15100
b1000000000000000000000000000 !%
b1000000000000000000000000000 "%
b1000000000000000000000000000 (
b1000000000000000000000000000 3%
b0 4%
b100000000000 @
b0 A
b1000000000000000000000000000 I%
b1000000000000000000000000000 J%
0M%
0N%
b0 P%
b1000000000000000000000000000 W#
b1000000000000000000000000000 X#
0Y#
b1000000000000000000000000000 Z%
0[#
b0 [%
b1000000000000000000000000000 \!
b1000000000000000000000000000 ]#
b1000000000000000000000000000 `!
b0 a#
b1000000000000000000000000000 p%
0q%
0r%
b1000000000000000000000000000 s
b0 s%
#20000
0!
1"
0#
b1 $
b0 %
b11101010 &
1'
02
13
04
b1 5
b11101010 7
18
0N&
b10000000000000000 O
0O&
b11101010 P&
1Q&
b1 R&
0g
b10000000000000000 m&
0q
0r
0y!
0}!
#25000
1!
12
b11101010 9
b11101010 :
b0 ;
1N&
b100 Q
b100 T
b11101010 T&
b11101010 U&
b1000000000000000000000000000 [&
b100000000000 ^&
xe
1g
xl
b101 n
1q
b1 q&
1r
1y!
1}!
#25100
b1000000000000000000000000000 W#
b1000000000000000000000000000 X#
0Y#
0[#
bx `
bx a
b0 a#
bx d
bx m
#30000
0!
02
0N&
0g
0q
0r
0y!
0}!
#35000
1!
b11101010 )
bx *
bx +
12
b11101010 5"
b0 6"
b0 <
b11101010 ?
bx E
bx F
1N&
b100 Q
b11101010 R#
b100 T
b11101010 V&
bx Y
bx Z
b11101010 Z!
b100000000000 \&
b11101010 ^!
b11101010 `&
0e
1g
0l
b101 n
1q
b10 q&
1r
b100000000000 x&
1y!
1}!
#35100
b1000000000000000000000000000 W#
b1000000000000000000000000000 X#
0Y#
0[#
b0 `
b0 a
b0 a#
b0 d
b0 m
#40000
0!
02
0N&
0g
0q
0r
0y!
0}!
#45000
1!
b0 *
b0 +
b11101010 -&
b11101010 /&
b11101010 1&
12
b11101010 3&
b100000000000 B
b0 E
b0 F
1N&
b100 Q
b100 T
b100000000000 W
b0 Y
b0 Z
b111001011100000001110001000 [&
b11100101110 ^&
b1110001000 _&
1g
b101 n
1o&
1q
b0 q&
1r
1y!
1}!
#45100
b111001011100000001110001000 !%
b111001011100000001110001000 "%
b111001011100000001110001000 (
b111001011100000001110001000 3%
b0 4%
b11100101110 @
b1110001000 A
b111001011100000001110001000 I%
b111001011100000001110001000 J%
0M%
0N%
b0 P%
b111001011100000001110001000 W#
b111001011100000001110001000 X#
0Y#
b111001011100000001110001000 Z%
0[#
b0 [%
b111001011100000001110001000 \!
b111001011100000001110001000 ]#
b111001011100000001110001000 `!
b0 a#
b111001011100000001110001000 p%
0q%
0r%
b111001011100000001110001000 s
b0 s%
#50000
0!
02
0N&
0g
0q
0r
0y!
0}!
#55000
1!
12
b1 =
b0 >
b11100101110 B
b1110001000 C
1D
1N&
b10000000000000000 P
b100 Q
b100 T
b11100101110 W
b1110001000 X
b11100101110 \&
b1110001000 ]&
b100000000000 ^
1a&
b1 b&
b100000000000 c
b0 c&
1g
1h
1j
b100000000000 k
b101 n
b10000000000000000 n&
1p&
1q
b1 q&
1r
b10000000000000000 r&
b11100101110 x&
1y!
b1110001000 y&
1}!
#55100
b111001011100000001110001000 W#
b111001011100000001110001000 X#
0Y#
0[#
b0 a#
#60000
0!
b0 $
b1 %
b101001110 &
02
b0 5
b1 6
b101001110 7
0N&
b1 O
b101001110 P&
b0 R&
b1 S&
0g
b1 m&
0q
0r
0y!
0}!
#65000
1!
b1 "'
12
b101001110 9
b101001110 :
1N&
b100 Q
b100 T
b101001110 T&
b101001110 U&
b1 \
b11100101110 ^
b1110001000 _
b1 b
b11100010000000011100101110 c
1g
b1 i
b11100010000000011100101110 k
b101 n
1q
b10 q&
1r
1y!
b11100101110 |&
1}!
b1110001000 ~&
#65100
b111001011100000001110001000 W#
b111001011100000001110001000 X#
0Y#
0[#
b0 a#
#70000
0!
02
0N&
0g
0q
0r
0y!
0}!
#75000
1!
b11 "'
b101001110 )
1-
12
b101001110 5"
b0 6"
b101001110 ?
1N&
b100 Q
b101001110 R#
b100 T
b101001110 V&
b1110010111 Y&
b101001110 Z!
b111000100 Z&
b101001110 ^!
b101001110 `&
1g
b101 n
1q
b0 q&
1r
1y!
b11100101110 z&
b1110001000 {&
1}!
#75100
b111001011100000001110001000 W#
b111001011100000001110001000 X#
0Y#
0[#
b0 a#
#80000
0!
02
0N&
0g
0q
0r
0y!
0}!
#85000
1!
b101001110 -&
b101001110 /&
b101001110 1&
12
b101001110 3&
1N&
b100 Q
b100 T
b110010110110000010011011100 [&
b11001011011 ^&
b10011011100 _&
1e
1g
1l
b101 n
1q
b1 q&
1r
1y!
1}!
#85100
b110010110110000010011011100 !%
b110010110110000010011011100 "%
b110010110110000010011011100 (
b110010110110000010011011100 3%
b0 4%
b11001011011 @
b10011011100 A
b110010110110000010011011100 I%
b110010110110000010011011100 J%
0M%
0N%
b0 P%
b110010110110000010011011100 W#
b110010110110000010011011100 X#
0Y#
b110010110110000010011011100 Z%
0[#
b0 [%
b110010110110000010011011100 \!
b110010110110000010011011100 ]#
b110010110110000010011011100 `!
b0 a#
b110010110110000010011011100 p%
0q%
0r%
b110010110110000010011011100 s
b0 s%
#90000
0!
02
0N&
0g
0q
0r
0y!
0}!
#95000
1!
12
b0 =
b1 >
b11001011011 B
b10011011100 C
1N&
b1 P
b100 Q
b100 T
b11001011011 W
b10011011100 X
b11001011011 \&
b10011011100 ]&
b0 b&
b1 c&
1g
b101 n
b1 n&
1q
b10 q&
1r
b1 r&
b11001011011 x&
1y!
b10011011100 y&
1}!
#95100
b110010110110000010011011100 W#
b110010110110000010011011100 X#
0Y#
0[#
b1110010111 `
b111000100 a
b0 a#
b11100010000000000000000000000001110010111 d
b11100010000000000000000000000001110010111 m
#100000
0!
b1 $
b1 %
b1111110111111001 &
02
b1 5
b1111110111111001 7
0N&
b10000000000000001 O
b1111110111111001 P&
b1 R&
0g
b10000000000000001 m&
0q
0r
0y!
0}!
#105000
1!
b11001011011 !'
1,
12
b1111110111111001 9
b1000000111 :
b1110010111 E
b111000100 F
1N&
b100 Q
b100 T
b1111110111111001 T&
b1000000111 U&
b1110010111 Y
b111000100 Z
b0 \
b1 ]
b11001011011 ^
b10011011100 _
b10000000000000000 b
b100110111000000011001011011 c
1g
b10000000000000000 i
b100110111000000011001011011 k
b101 n
1q
b0 q&
1r
1y!
b0 |&
1}!
b10011011100 }&
b0 ~&
#105100
b110010110110000010011011100 W#
b110010110110000010011011100 X#
0Y#
0[#
b0 a#
#110000
0!
02
0N&
0g
0q
0r
0y!
0}!
#115000
1!
b100011101 )
b1111111111111111 .
12
b100011101 5"
b0 6"
b101 ;
b100011101 ?
1N&
b100 Q
b100011101 R#
b100 T
b100011101 V&
b101 W&
b11111111111111111111110110010010 Y&
b100011101 Z!
b1100101101 Z&
b100011101 ^!
b100011101 `&
1g
b101 n
1q
b1 q&
1r
1y!
b111111111111111111111101100100100 z&
b11001011011 {&
1}!
#115100
b110010110110000010011011100 W#
b110010110110000010011011100 X#
0Y#
0[#
b0 a#
#120000
0!
02
0N&
0g
0q
0r
0y!
0}!
#125000
1!
b100011101 -&
b100011101 /&
b100011101 1&
12
b100011101 3&
b101 <
1N&
b100 Q
b100 T
b101 X&
b110110010110000010000111010 [&
b11011001011 ^&
b10000111010 _&
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#125100
b110110010110000010000111010 !%
b110110010110000010000111010 "%
b110110010110000010000111010 (
b110110010110000010000111010 3%
b0 4%
b11011001011 @
b10000111010 A
b110110010110000010000111010 I%
b110110010110000010000111010 J%
0M%
0N%
b0 P%
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
b110110010110000010000111010 Z%
0[#
b0 [%
b110110010110000010000111010 \!
b110110010110000010000111010 ]#
b110110010110000010000111010 `!
b0 a#
b110110010110000010000111010 p%
0q%
0r%
b110110010110000010000111010 s
b0 s%
#130000
0!
02
0N&
0g
0q
0r
0y!
0}!
#135000
1!
12
b1 =
b1 >
b10000111010 B
b1111100100110101 C
1N&
b10000000000000001 P
b100 Q
b100 T
b10000111010 W
b1111100100110101 X
b10000111010 \&
b1111100100110101 ]&
b1 b&
b1 c&
1g
b101 n
b10000000000000001 n&
1q
b0 q&
1r
b10000000000000001 r&
b10000111010 x&
1y!
b1111100100110101 y&
1}!
#135100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b11111111111111111111110110010010 `
b1100101101 a
b0 a#
b110010110111111111111111111111110110010010 d
b110010110111111111111111111111110110010010 m
#140000
0!
02
0N&
0g
0q
0r
0y!
0}!
#145000
1!
b10000111010 !'
b1111111111111111 *
12
b11111111111111111111110110010010 E
b1100101101 F
1N&
b100 Q
b100 T
b11111111111111111111110110010010 Y
b1100101101 Z
b1 \
b10000111010 ^
b1111100100110101 _
b10000000000000001 b
b11111001001101010000010000111010 c
1g
b10000000000000001 i
b11111001001101010000010000111010 k
b101 n
1q
b1 q&
1r
1y!
b10000111010 |&
1}!
b11111111111111111111100100110101 }&
b11111111111111111111100100110101 ~&
#145100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#150000
0!
02
0N&
0g
0q
0r
0y!
0}!
#155000
1!
b0 .
b1111111111111111 /
12
1N&
b100 Q
b100 T
b10110000010 Y&
b11111111111111111111111010110111 Z&
1g
b101 n
1q
b10 q&
1r
1y!
b101100000101 z&
b111111111111111111111110101101111 {&
1}!
#155100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#160000
0!
02
0N&
0g
0q
0r
0y!
0}!
#165000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#165100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#170000
0!
02
0N&
0g
0q
0r
0y!
0}!
#175000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#175100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b10110000010 `
b11111111111111111111111010110111 a
b0 a#
b1111111111111111111111101011011100000000000000000000010110000010 d
b1111111111111111111111101011011100000000000000000000010110000010 m
#180000
0!
02
0N&
0g
0q
0r
0y!
0}!
#185000
1!
b0 *
b1111111111111111 +
12
b10110000010 E
b11111111111111111111111010110111 F
1N&
b100 Q
b100 T
b10110000010 Y
b11111111111111111111111010110111 Z
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#185100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#190000
0!
02
0N&
0g
0q
0r
0y!
0}!
#195000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#195100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#200000
0!
02
0N&
0g
0q
0r
0y!
0}!
#205000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#205100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#210000
0!
02
0N&
0g
0q
0r
0y!
0}!
#215000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#215100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#220000
0!
02
0N&
0g
0q
0r
0y!
0}!
#225000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#225100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#230000
0!
02
0N&
0g
0q
0r
0y!
0}!
#235000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#235100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#240000
0!
02
0N&
0g
0q
0r
0y!
0}!
#245000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#245100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#250000
0!
02
0N&
0g
0q
0r
0y!
0}!
#255000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#255100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#260000
0!
02
0N&
0g
0q
0r
0y!
0}!
#265000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#265100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#270000
0!
02
0N&
0g
0q
0r
0y!
0}!
#275000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#275100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#280000
0!
02
0N&
0g
0q
0r
0y!
0}!
#285000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#285100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#290000
0!
02
0N&
0g
0q
0r
0y!
0}!
#295000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#295100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#300000
0!
02
0N&
0g
0q
0r
0y!
0}!
#305000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#305100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#310000
0!
02
0N&
0g
0q
0r
0y!
0}!
#315000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#315100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#320000
0!
02
0N&
0g
0q
0r
0y!
0}!
#325000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#325100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#330000
0!
02
0N&
0g
0q
0r
0y!
0}!
#335000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#335100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#340000
0!
02
0N&
0g
0q
0r
0y!
0}!
#345000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#345100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#350000
0!
02
0N&
0g
0q
0r
0y!
0}!
#355000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#355100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#360000
0!
02
0N&
0g
0q
0r
0y!
0}!
#365000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#365100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#370000
0!
02
0N&
0g
0q
0r
0y!
0}!
#375000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#375100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#380000
0!
02
0N&
0g
0q
0r
0y!
0}!
#385000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#385100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#390000
0!
02
0N&
0g
0q
0r
0y!
0}!
#395000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#395100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#400000
0!
02
0N&
0g
0q
0r
0y!
0}!
#405000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#405100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#410000
0!
02
0N&
0g
0q
0r
0y!
0}!
#415000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#415100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#420000
0!
02
0N&
0g
0q
0r
0y!
0}!
#425000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#425100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#430000
0!
02
0N&
0g
0q
0r
0y!
0}!
#435000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#435100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#440000
0!
02
0N&
0g
0q
0r
0y!
0}!
#445000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#445100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#450000
0!
02
0N&
0g
0q
0r
0y!
0}!
#455000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#455100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#460000
0!
02
0N&
0g
0q
0r
0y!
0}!
#465000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#465100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#470000
0!
02
0N&
0g
0q
0r
0y!
0}!
#475000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b1 q&
1r
1y!
1}!
#475100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#480000
0!
02
0N&
0g
0q
0r
0y!
0}!
#485000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b10 q&
1r
1y!
1}!
#485100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
#490000
0!
02
0N&
0g
0q
0r
0y!
0}!
#495000
1!
12
1N&
b100 Q
b100 T
1g
b101 n
1q
b0 q&
1r
1y!
1}!
#495100
b110110010110000010000111010 W#
b110110010110000010000111010 X#
0Y#
0[#
b0 a#
