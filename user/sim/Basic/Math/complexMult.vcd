$date
   Thu Jun 20 02:55:11 2024
$end
$version
  2018.3
$end
$timescale
  1ps
$end
$scope module complexMult_tb $end
$var reg 1 ! clock $end
$var reg 1 " enable $end
$var reg 1 # reset $end
$var reg 16 $ a_i [15:0] $end
$var reg 16 % a_q [15:0] $end
$var reg 16 & b_i [15:0] $end
$var reg 16 ' b_q [15:0] $end
$var reg 1 ( input_valid $end
$var wire 32 ) p_i [31:0] $end
$var wire 32 * p_q [31:0] $end
$var wire 1 + output_valid $end
$var wire 1 , ovalid $end
$var wire 32 - result_r [31:0] $end
$var wire 32 . result_i [31:0] $end
$scope module dut $end
$var wire 1 / clock $end
$var wire 1 0 enable $end
$var wire 1 1 reset $end
$var wire 16 2 a_i [15:0] $end
$var wire 16 3 a_q [15:0] $end
$var wire 16 4 b_i [15:0] $end
$var wire 16 5 b_q [15:0] $end
$var wire 1 6 input_valid $end
$var reg 32 7 p_i [31:0] $end
$var reg 32 8 p_q [31:0] $end
$var wire 1 + output_valid $end
$var reg 4 9 delay [3:0] $end
$var reg 16 : ar [15:0] $end
$var reg 16 ; ai [15:0] $end
$var reg 16 < br [15:0] $end
$var reg 16 = bi [15:0] $end
$var wire 32 > prod_i [31:0] $end
$var wire 32 ? prod_q [31:0] $end
$var wire 32 @ s_axis_a_tdata [31:0] $end
$var wire 32 A s_axis_b_tdata [31:0] $end
$var wire 64 B m_axis_dout_tdata [63:0] $end
$var wire 1 C m_axis_dout_tvalid $end
$var parameter 32 D DELAY [31:0] $end
$scope module mult_inst $end
$var wire 1 E aclk $end
$var wire 1 F s_axis_a_tvalid $end
$var wire 32 G s_axis_a_tdata [31:0] $end
$var wire 1 H s_axis_b_tvalid $end
$var wire 32 I s_axis_b_tdata [31:0] $end
$var wire 1 J m_axis_dout_tvalid $end
$var wire 64 K m_axis_dout_tdata [63:0] $end
$upscope $end
$scope module stb_delay_inst $end
$var wire 1 / clock $end
$var wire 1 1 reset $end
$var wire 1 6 idata [0:0] $end
$var wire 1 + odata [0:0] $end
$var integer 32 L i $end
$var parameter 32 M WIDTH [31:0] $end
$var parameter 32 N DELAY [31:0] $end
$upscope $end
$upscope $end
$scope module u_cmpl_mul $end
$var wire 1 O clock $end
$var wire 1 P reset $end
$var wire 1 Q ivalid $end
$var wire 16 R dataa_r [15:0] $end
$var wire 16 S dataa_i [15:0] $end
$var wire 16 T datab_r [15:0] $end
$var wire 16 U datab_i [15:0] $end
$var wire 1 , ovalid $end
$var wire 32 - result_r [31:0] $end
$var wire 32 . result_i [31:0] $end
$var reg 33 V outr [32:0] $end
$var reg 33 W outi [32:0] $end
$var reg 32 X ab_rr [31:0] $end
$var reg 32 Y ab_ii [31:0] $end
$var reg 32 Z ab_ri [31:0] $end
$var reg 32 [ ab_ir [31:0] $end
$var reg 4 \ ovalid_buf [3:0] $end
$var parameter 32 ] SCALE_FACTOR [31:0] $end
$var parameter 32 ^ REAL_WIDTH_A [31:0] $end
$var parameter 32 _ IMGN_WIDTH_A [31:0] $end
$var parameter 32 ` REAL_WIDTH_B [31:0] $end
$var parameter 32 a IMGN_WIDTH_B [31:0] $end
$var parameter 32 b REAL_WIDTH_O [31:0] $end
$var parameter 32 c IMGN_WIDTH_O [31:0] $end
$var parameter 32 d AB_RR_WIDTH [31:0] $end
$var parameter 32 e AB_II_WIDTH [31:0] $end
$var parameter 32 f AB_RI_WIDTH [31:0] $end
$var parameter 32 g AB_IR_WIDTH [31:0] $end
$var parameter 32 h REAL_WIDTH [31:0] $end
$var parameter 32 i IMGN_WIDTH [31:0] $end
$var parameter 32 j END_INDEX_R [31:0] $end
$var parameter 32 k END_INDEX_I [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
1#
b0 $
b0 %
b0 &
b0 '
0(
bx )
bx *
x+
0,
b0 -
b0 .
0/
00
11
b0 2
b0 3
b0 4
b0 5
06
bx 7
bx 8
bx 9
bx :
bx ;
bx <
bx =
bx >
bx ?
bx @
bx A
bx B
0C
b100 D
0E
0F
bx G
0H
bx I
0J
bx K
bx L
b1 M
b101 N
0O
1P
0Q
b0 R
b0 S
b0 T
b0 U
b0 V
b0 W
b0 X
b0 Y
b0 Z
b0 [
b0 \
b0 ]
b10000 ^
b10000 _
b10000 `
b10000 a
b100000 b
b100000 c
b100000 d
b100000 e
b100000 f
b100000 g
b100000 h
b100000 i
b1 j
b1 k
$end
#100
b0 >
b0 ?
b0 B
b0 K
#5000
1!
b0 )
b0 *
0+
1/
b0 7
b0 8
b0 9
b0 :
b0 ;
b0 <
b0 =
b0 @
b0 A
1E
b0 G
b0 I
b101 L
1O
#10000
0!
1"
0#
0/
10
01
0E
0O
0P
#15000
1!
1/
1E
b101 L
1O
#20000
0!
b11 $
b100 %
b1 &
b10 '
1(
0/
b11 2
b100 3
b1 4
b10 5
16
0E
1F
1H
0O
1Q
b11 R
b100 S
b1 T
b10 U
#25000
1!
1/
b11 :
b100 ;
b1 <
b10 =
b1000000000000000011 @
b100000000000000001 A
1E
b1000000000000000011 G
b100000000000000001 I
b101 L
1O
b11 X
b1000 Y
b110 Z
b100 [
b1 \
#25100
bx >
bx ?
bx B
bx K
#30000
0!
0(
0/
06
0E
0F
0H
0O
0Q
#35000
1!
bx )
bx *
1/
bx 7
bx 8
1E
b101 L
1O
b10 \
#35100
b0 >
b0 ?
b0 B
b0 K
#40000
0!
0/
0E
0O
#45000
1!
b0 )
b0 *
1/
b0 7
b0 8
1C
1E
1J
b101 L
1O
b100 \
#50000
0!
b111 $
b1000 %
b101 &
b110 '
1(
0/
b111 2
b1000 3
b101 4
b110 5
16
0E
1F
1H
0O
1Q
b111 R
b1000 S
b101 T
b110 U
#55000
1!
1,
b11111111111111111111111111111101 -
b101 .
1/
b111 :
b1000 ;
b101 <
b110 =
b10000000000000000111 @
b1100000000000000101 A
0C
1E
b10000000000000000111 G
b1100000000000000101 I
0J
b101 L
1O
b111111111111111111111111111111011 V
b1010 W
b100011 X
b110000 Y
b101010 Z
b101000 [
b1001 \
#55100
b11111111111111111111111111111101 >
b101 ?
b10111111111111111111111111111111101 B
b10111111111111111111111111111111101 K
#60000
0!
0(
0/
06
0E
0F
0H
0O
0Q
#65000
1!
b11111111111111111111111111111101 )
b101 *
1+
0,
1/
b11111111111111111111111111111101 7
b101 8
1E
b101 L
1O
b10 \
#70000
0!
0/
0E
0O
#75000
1!
0+
1/
1C
1E
1J
b101 L
1O
b100 \
#80000
0!
b1111111111111101 $
b10 %
b100 &
b1111111111111111 '
1(
0/
b1111111111111101 2
b10 3
b100 4
b1111111111111111 5
16
0E
1F
1H
0O
1Q
b1111111111111101 R
b10 S
b100 T
b1111111111111111 U
#85000
1!
1,
b11111111111111111111111111111001 -
b101001 .
1/
b1111111111111101 :
b10 ;
b100 <
b1111111111111111 =
b101111111111111101 @
b11111111111111110000000000000100 A
0C
1E
b101111111111111101 G
b11111111111111110000000000000100 I
0J
b101 L
1O
b111111111111111111111111111110011 V
b1010010 W
b11111111111111111111111111110100 X
b11111111111111111111111111111110 Y
b11 Z
b1000 [
b1001 \
#85100
b11111111111111111111111111111001 >
b101001 ?
b10100111111111111111111111111111111001 B
b10100111111111111111111111111111111001 K
#90000
0!
0(
0/
06
0E
0F
0H
0O
0Q
#95000
1!
b11111111111111111111111111111001 )
b101001 *
1+
0,
1/
b11111111111111111111111111111001 7
b101001 8
1E
b101 L
1O
b10 \
#100000
0!
0/
0E
0O
#105000
1!
0+
1/
1C
1E
1J
b101 L
1O
b100 \
#110000
0!
0/
0E
0O
#115000
1!
1,
1/
0C
1E
0J
b101 L
1O
b1000 \
